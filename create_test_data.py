#!/usr/bin/env python3
"""
Skript pro vytvo≈ôen√≠ testovac√≠ch dat pro syst√©m doch√°zky.
Vytvo≈ô√≠ r≈Øzn√© sc√©n√°≈ôe pro testov√°n√≠ exportu p√°r≈Ø p≈ô√≠chod-odchod.
"""

import sqlite3
from datetime import datetime, timedelta
import pytz

# Konfigurace
DATABASE = 'data/attendance.db'
TIMEZONE = pytz.timezone('Europe/Prague')

def create_test_data():
    """Vytvo≈ô√≠ testovac√≠ data s r≈Øzn√Ωmi sc√©n√°≈ôi."""
    
    # P≈ôipojen√≠ k datab√°zi
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    
    print("Vytv√°≈ô√≠m testovac√≠ data...")
    
    # 1. P≈ôid√°n√≠ testovac√≠ch zamƒõstnanc≈Ø
    employees = [
        "Jan Nov√°k",
        "Marie Svobodov√°", 
        "Pavel Dvo≈ô√°k"
    ]
    
    for name in employees:
        try:
            cursor.execute('INSERT INTO employees (name, is_active) VALUES (?, 1)', (name,))
            print(f"‚úì P≈ôid√°n zamƒõstnanec: {name}")
        except sqlite3.IntegrityError:
            print(f"- Zamƒõstnanec {name} ji≈æ existuje")
    
    conn.commit()
    
    # Z√≠sk√°n√≠ ID zamƒõstnanc≈Ø
    emp_ids = {}
    for name in employees:
        result = cursor.execute('SELECT id FROM employees WHERE name = ?', (name,)).fetchone()
        if result:
            emp_ids[name] = result[0]
    
    # 2. Vytvo≈ôen√≠ testovac√≠ch z√°znam≈Ø doch√°zky
    base_date = datetime.now(TIMEZONE).date() - timedelta(days=7)  # P≈ôed t√Ωdnem
    
    # Sc√©n√°≈ô 1: Jan Nov√°k - norm√°ln√≠ pracovn√≠ dny s r≈Øzn√Ωmi ƒçasy
    jan_id = emp_ids["Jan Nov√°k"]
    test_records = [
        # Den 1: 8:05 - 16:25 (8:20 hodin, m√° se zaokrouhlit na 8:15)
        (jan_id, 'Enter', (base_date + timedelta(days=0)).strftime('%Y-%m-%d') + ' 08:05:00'),
        (jan_id, 'Leave', (base_date + timedelta(days=0)).strftime('%Y-%m-%d') + ' 16:25:00'),
        
        # Den 2: 7:58 - 16:12 (8:14 hodin, m√° se zaokrouhlit na 8:15 s p≈ôenosem z p≈ôedchoz√≠ho dne)
        (jan_id, 'Enter', (base_date + timedelta(days=1)).strftime('%Y-%m-%d') + ' 07:58:00'),
        (jan_id, 'Leave', (base_date + timedelta(days=1)).strftime('%Y-%m-%d') + ' 16:12:00'),
        
        # Den 3: 8:00 - 16:30 (8:30 hodin)
        (jan_id, 'Enter', (base_date + timedelta(days=2)).strftime('%Y-%m-%d') + ' 08:00:00'),
        (jan_id, 'Leave', (base_date + timedelta(days=2)).strftime('%Y-%m-%d') + ' 16:30:00'),
    ]
    
    # Sc√©n√°≈ô 2: Marie Svobodov√° - chybƒõj√≠c√≠ odchod
    marie_id = emp_ids["Marie Svobodov√°"]
    test_records.extend([
        # Den 1: Norm√°ln√≠ den
        (marie_id, 'Enter', (base_date + timedelta(days=0)).strftime('%Y-%m-%d') + ' 08:15:00'),
        (marie_id, 'Leave', (base_date + timedelta(days=0)).strftime('%Y-%m-%d') + ' 16:45:00'),
        
        # Den 2: Chybƒõj√≠c√≠ odchod
        (marie_id, 'Enter', (base_date + timedelta(days=1)).strftime('%Y-%m-%d') + ' 08:10:00'),
        # ≈Ω√°dn√Ω odchod!
        
        # Den 3: Dal≈°√≠ norm√°ln√≠ den
        (marie_id, 'Enter', (base_date + timedelta(days=2)).strftime('%Y-%m-%d') + ' 08:00:00'),
        (marie_id, 'Leave', (base_date + timedelta(days=2)).strftime('%Y-%m-%d') + ' 17:00:00'),
    ])
    
    # Sc√©n√°≈ô 3: Pavel Dvo≈ô√°k - v√≠ce p≈ô√≠chod≈Ø/odchod≈Ø v jednom dni (p≈ôest√°vka)
    pavel_id = emp_ids["Pavel Dvo≈ô√°k"]
    test_records.extend([
        # Den 1: S obƒõdovou p≈ôest√°vkou
        (pavel_id, 'Enter', (base_date + timedelta(days=0)).strftime('%Y-%m-%d') + ' 08:00:00'),
        (pavel_id, 'Leave', (base_date + timedelta(days=0)).strftime('%Y-%m-%d') + ' 12:00:00'),  # Odchod na obƒõd
        (pavel_id, 'Enter', (base_date + timedelta(days=0)).strftime('%Y-%m-%d') + ' 13:00:00'),  # N√°vrat z obƒõda
        (pavel_id, 'Leave', (base_date + timedelta(days=0)).strftime('%Y-%m-%d') + ' 17:00:00'),  # Konec dne
        
        # Den 2: Kr√°tk√° pr√°ce
        (pavel_id, 'Enter', (base_date + timedelta(days=1)).strftime('%Y-%m-%d') + ' 09:00:00'),
        (pavel_id, 'Leave', (base_date + timedelta(days=1)).strftime('%Y-%m-%d') + ' 13:30:00'),  # 4:30 hodin
    ])
    
    # Vlo≈æen√≠ v≈°ech z√°znam≈Ø
    for employee_id, status, timestamp in test_records:
        cursor.execute(
            'INSERT INTO attendance (employee_id, status, timestamp) VALUES (?, ?, ?)',
            (employee_id, status, timestamp)
        )
        print(f"‚úì P≈ôid√°n z√°znam: {status} v {timestamp}")
    
    conn.commit()
    conn.close()
    
    print(f"\nüéâ Testovac√≠ data byla √∫spƒõ≈°nƒõ vytvo≈ôena!")
    print(f"üìä Zahrnuj√≠ r≈Øzn√© sc√©n√°≈ôe:")
    print(f"   - Norm√°ln√≠ pracovn√≠ dny s r≈Øzn√Ωmi ƒçasy")
    print(f"   - Chybƒõj√≠c√≠ odchody") 
    print(f"   - V√≠ce p≈ô√≠chod≈Ø/odchod≈Ø v jednom dni")
    print(f"   - R≈Øzn√© d√©lky pracovn√≠ doby")
    print(f"\nüîó Otev≈ôete http://localhost:5000/admin pro zobrazen√≠ dat")

if __name__ == '__main__':
    create_test_data()